@{
    ViewData["Title"] = "Content Page";
}

<div class="container">
    <h1>Wheel of Names</h1>
    <div id="chart"></div>
    <div id="question"><h1></h1></div>
</div>

<script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.10.4/gsap.min.js"></script>

<script>

    // Load the names from the controller
    loadNames();

    async function loadNames() {
        const response = await fetch('/Home/GetNames');
        var data = await response.json();
        console.log("Data loaded:", data); // Log the data to confirm it's loaded
        InitializeWheelOfNames(data);
    }

    function InitializeWheelOfNames(data){
        var padding = {top: 20, right: 40, bottom: 0, left: 0},
            w = 500 - padding.left - padding.right,    // Width of the container
            h = 500 - padding.top - padding.bottom,    // Height of the container
            r = Math.min(w, h) / 2;                     // Radius of the wheel (dynamically calculated)

        var rotation = 0, oldrotation = 0, picked = 100000, oldpick = [],
            color = d3.scale.category20(); // Color scale for the slices

        // Set up the SVG container
        var svg = d3.select('#chart')
            .append("svg")
            .data([data])
            .attr("width", w + padding.left + padding.right)
            .attr("height", h + padding.top + padding.bottom);

        var container = svg.append("g")
            .attr("class", "chartholder")
            .attr("transform", "translate(" + (w / 2 + padding.left) + "," + (h / 2 + padding.top) + ")");

        var vis = container
            .append("g");

        var pie = d3.layout.pie()
            .sort(null)  // Ensure no sorting by default
            .value(function(d) { return 1; }); // Equal slice sizes by default

        var arc = d3.svg.arc()
            .outerRadius(r)  // Use the dynamically calculated radius
            .innerRadius(0);  // Set inner radius to 0 for full pie slices

        // Initial drawing of slices
        function drawSlices() {
            // Clear the previous slices before drawing new ones
            vis.selectAll("g.slice").remove();

            var arcs = vis.selectAll("g.slice")
                .data(pie(data))  // Use the pie layout to generate the slices
                .enter()
                .append("g")
                .attr("class", "slice");

            arcs.append("path")
                .attr("fill", function(d, i) { return color(i); })  // Assign colors to slices
                .attr("d", arc);  // Use the arc generator to create the path for each slice

            arcs.append("text")
                .attr("transform", function(d) {
                    d.innerRadius = 0;
                    d.outerRadius = r;
                    d.angle = (d.startAngle + d.endAngle) / 2;
                    return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")translate(" + (d.outerRadius - 10) + ")";
                })
                .attr("text-anchor", "end")
                .text(function(d, i) { return data[i].label; })
                .style({"font-weight":"bold", "font-size":"20px"});
        }

        // Initial slice rendering
        drawSlices();

        // Re-enable the click functionality to spin again
        container.on("click", spin);

        // Spin function when a slice is selected
        function spin(d) {
            container.on("click", null); // Disable clicking during spin
            console.log("OldPick: " + oldpick.length, "Data length: " + data.length);
            if (oldpick.length == data.length) {
                console.log("done");
                container.on("click", null);
                return;
            }

            var ps = 360 / data.length,
                pieslice = Math.round(1440 / data.length),
                rng = Math.floor((Math.random() * 1440) + 360);

            rotation = (Math.round(rng / ps) * ps);

            picked = Math.round(data.length - (rotation % 360) / ps);
            picked = picked >= data.length ? (picked % data.length) : picked;

            // Prevent picking the same slice again
            if (oldpick.indexOf(picked) !== -1) {
                d3.select(this).call(spin);
                return;
            } else {
                oldpick.push(picked);
            }

            rotation += 90 - Math.round(ps / 2);
            vis.transition()
            .duration(3000)
            .attrTween("transform", rotTween)
            .each("end", function() {

                // Alert for the winner
                alert("The winner is " + data[picked].label);

                // Remove the selected slice from the wheel
                d3.select(".slice:nth-child(" + (picked + 1) + ")").remove();

                // Adjust the data by removing the selected entry
                data.splice(picked, 1);

                // Recalculate the pie chart and arcs after removing the slice
                drawSlices();

                // Re-enable the click functionality to spin again
                container.on("click", spin);

                oldrotation = rotation;

            });
        }

        // Function to create smooth rotation animation
        function rotTween(to) {
            var i = d3.interpolate(oldrotation % 360, rotation);
            return function(t) {
                return "rotate(" + i(t) + ")";
            };
        }
        //make arrow
        svg.append("g")
            .attr("transform", "translate(" + (w + padding.left + padding.right) + "," + ((h/2)+padding.top) + ")")
            .append("path")
            .attr("d", "M-" + (r*.15) + ",0L0," + (r*.05) + "L0,-" + (r*.05) + "Z")
            .style({"fill":"black"});

        //draw spin circle
        container.append("circle")
            .attr("cx", 0)
            .attr("cy", 0)
            .attr("r", 60)
            .style({"fill":"white","cursor":"pointer"});

        //spin text
        container.append("text")
            .attr("x", 0)
            .attr("y", 15)
            .attr("text-anchor", "middle")
            .text("SPIN")
            .style({"font-weight":"bold", "font-size":"30px"});

        function getRandomNumbers(){
            var array = new Uint16Array(1000);
            var scale = d3.scale.linear().range([360, 1440]).domain([0, 100000]);
            if(window.hasOwnProperty("crypto") && typeof window.crypto.getRandomValues === "function"){
                window.crypto.getRandomValues(array);
                console.log("works");
            } else {
                //no support for crypto, get crappy random numbers
                for(var i=0; i < 1000; i++){
                    array[i] = Math.floor(Math.random() * 100000) + 1;
                }
            }
            return array;
        }
    }
</script>
